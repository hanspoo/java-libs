/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package validators;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import validators.PassValidator;
import validators.PassValidator.Reasons;
import validators.PassValidatorGoogle;

public class TestPassValidatorGoogle {

	@Test
	public void soloNumerosErrorDebeTenerMayusculas() {
		PassValidator validator = new PassValidatorGoogle();
		assertTrue(validator.validate("123456").contains(Reasons.MUST_CONTAINT_UPPERCASE));

	}

	@Test
	public void soloNumerosErrorDebeTenerSimbolos() {
		PassValidator validator = new PassValidatorGoogle();
		assertTrue(validator.validate("123456").contains(Reasons.MUST_CONTAINT_SYMBOL));

	}

	@Test
	public void soloNumerosErrorDebeTenerLowercase() {
		PassValidator validator = new PassValidatorGoogle();
		assertTrue(validator.validate("123456").contains(Reasons.MUST_CONTAINT_LOWERCASE));

	}

	@Test
	public void sinNumerosErrorDebeTenerNumeros() {
		PassValidator validator = new PassValidatorGoogle();
		assertTrue(validator.validate("abcde").contains(Reasons.MUST_CONTAINT_NUMBER));

	}

	@Test
	public void conUpperCaseNoDebeTenerErrorMayusculas() {
		PassValidator validator = new PassValidatorGoogle();
		assertFalse(validator.validate("A").contains(Reasons.MUST_CONTAINT_UPPERCASE));

	}

	@Test
	public void conLowerCaseNoDebeTenerErrorMinusculas() {
		PassValidator validator = new PassValidatorGoogle();
		assertFalse(validator.validate("a").contains(Reasons.MUST_CONTAINT_LOWERCASE));

	}

	@Test
	public void conNumerosNoDebeTenerErrorMinusculas() {
		PassValidator validator = new PassValidatorGoogle();
		assertFalse(validator.validate("1").contains(Reasons.MUST_CONTAINT_NUMBER));

	}

	@Test
	public void conSimbolosNoDebeTenerErrorSimbolos() {
		PassValidator validator = new PassValidatorGoogle();
		assertFalse(validator.validate("@").contains(Reasons.MUST_CONTAINT_SYMBOL));

	}

	@Test
	public void deshabilitaSimbolosNoReclamaPorSimbolos() {
		PassValidator validator = new PassValidatorGoogle();
		validator.disable(Reasons.MUST_CONTAINT_SYMBOL);
		assertFalse(validator.validate("1").contains(Reasons.MUST_CONTAINT_SYMBOL));

	}

	@Test
	public void conLargo6RechazoLargoMinimo8() {
		PassValidator validator = new PassValidatorGoogle();
		assertTrue(validator.validate("123456").contains(Reasons.MINIMAL_LENGTH));

	}

	@Test
	public void conLargo6BlancosRechazoLargoMinimo8() {
		PassValidator validator = new PassValidatorGoogle();
		assertTrue(validator.validate("  123456").contains(Reasons.MINIMAL_LENGTH));

	}

	@Test
	public void conLargo8NoDebeRechazarMinimo8() {
		PassValidator validator = new PassValidatorGoogle();
		assertFalse(validator.validate("12345678").contains(Reasons.MINIMAL_LENGTH));

	}

	@Test(expected = RuntimeException.class)
	public void conNullLanzaExcepcion() {
		PassValidator validator = new PassValidatorGoogle();
		validator.validate(null);

	}

}
